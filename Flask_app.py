# -*- coding: utf-8 -*-
"""
Created on Sun Jul 24 18:47:58 2022

@author: akash
"""

from flask import render_template,Flask,redirect,request
import sys
import pickle
import numpy as np

app = Flask(__name__,template_folder='templates')


#FEATURE MAPPING

def features(key,value):
    jobType = {
        'CFO':0.14285714,
        'CEO':0.00000000,
        'VICE_PRESIDENT':1.000000,
        'MANAGER':0.71428571,
        'JUNIOR':0.57142857,
        'JANITOR':0.42857143,
        'CTO':0.28571429,
        'SENIOR':0.85714286
        }
    
    degree = {
        'MASTERS':0.75,
        'HIGHER_SCHOOL':0.5,
        'DOCTORAL':0.25,
        'BACHELORS':0.00,
        'NONE':1.00            
        }

    major = {
        'BIOLOGY': 0.0,
        'BUSINESS': 0.125,
        'CHEMISTRY': 0.25,
        'COMPSCI': 0.375,
        'ENGINEERING': 0.5,
        'LITERATURE': 0.625,
        'MATH': 0.75,
        'NONE': 0.875,
        'PHYSICS': 1.0
        }
    
    industry = {
        'HEALTH':0.500,
        'WEB':1.000,
        'AUTO':0.000,
        'FINANCE':0.333,
        'EDUCATION':0.167,
        'OIL':0.667,
        'SERVICE':0.834
        }
    
    yearsExperience = {
        '0': 0.0,
        '1': 0.041666666666666664,
        '2': 0.08333333333333333,
        '3': 0.125,
        '4': 0.16666666666666666,
        '5': 0.20833333333333331, 
        '6': 0.25, 
        '7': 0.29166666666666663,
        '8': 0.3333333333333333, 
        '9': 0.375, 
        '10': 0.41666666666666663,
        '11': 0.4583333333333333,
        '12': 0.5, 
        '13': 0.5416666666666666,
        '14': 0.5833333333333333, 
        '15': 0.625,
        '16': 0.6666666666666666,
        '17': 0.7083333333333333,
        '18': 0.75,
        '19': 0.7916666666666666,
        '20': 0.8333333333333333, 
        '21': 0.875,
        '22': 0.9166666666666666,
        '23': 0.9583333333333333, 
        '24': 1.0
        }
    
    milesFromMetropolis = {'0': 0.0, '1': 0.010101010101010102, '2': 0.020202020202020204, '3': 0.030303030303030304, '4': 0.04040404040404041, '5': 0.05050505050505051, '6': 0.06060606060606061, '7': 0.07070707070707072, '8': 0.08080808080808081, '9': 0.09090909090909091, '10': 0.10101010101010102, '11': 0.11111111111111112, '12': 0.12121212121212122, '13': 0.13131313131313133, '14': 0.14141414141414144, '15': 0.15151515151515152, '16': 0.16161616161616163, '17': 0.17171717171717174, '18': 0.18181818181818182, '19': 0.19191919191919193, '20': 0.20202020202020204, '21': 0.21212121212121213, '22': 0.22222222222222224, '23': 0.23232323232323235, '24': 0.24242424242424243, '25': 0.25252525252525254, '26': 0.26262626262626265, '27': 0.27272727272727276, '28': 0.2828282828282829, '29': 0.29292929292929293, '30': 0.30303030303030304, '31': 0.31313131313131315, '32': 0.32323232323232326, '33': 0.33333333333333337, '34': 0.3434343434343435, '35': 0.3535353535353536, '36': 0.36363636363636365, '37': 0.37373737373737376, '38': 0.38383838383838387, '39': 0.393939393939394, '40': 0.4040404040404041, '41': 0.4141414141414142, '42': 0.42424242424242425, '43': 0.43434343434343436, '44': 0.4444444444444445, '45': 0.4545454545454546, '46': 0.4646464646464647, '47': 0.4747474747474748, '48': 0.48484848484848486, '49': 0.494949494949495, '50': 0.5050505050505051, '51': 0.5151515151515152, '52': 0.5252525252525253, '53': 0.5353535353535354, '54': 0.5454545454545455, '55': 0.5555555555555556, '56': 0.5656565656565657, '57': 0.5757575757575758, '58': 0.5858585858585859, '59': 0.595959595959596, '60': 0.6060606060606061, '61': 0.6161616161616162, '62': 0.6262626262626263, '63': 0.6363636363636365, '64': 0.6464646464646465, '65': 0.6565656565656566, '66': 0.6666666666666667, '67': 0.6767676767676768, '68': 0.686868686868687, '69': 0.696969696969697, '70': 0.7070707070707072, '71': 0.7171717171717172, '72': 0.7272727272727273, '73': 0.7373737373737375, '74': 0.7474747474747475, '75': 0.7575757575757577, '76': 0.7676767676767677, '77': 0.7777777777777778, '78': 0.787878787878788, '79': 0.797979797979798, '80': 0.8080808080808082, '81': 0.8181818181818182, '82': 0.8282828282828284, '83': 0.8383838383838385, '84': 0.8484848484848485, '85': 0.8585858585858587, '86': 0.8686868686868687, '87': 0.8787878787878789, '88': 0.888888888888889, '89': 0.8989898989898991, '90': 0.9090909090909092, '91': 0.9191919191919192, '92': 0.9292929292929294, '93': 0.9393939393939394, '94': 0.9494949494949496, '95': 0.9595959595959597, '96': 0.9696969696969697, '97': 0.9797979797979799, '98': 0.98989898989899, '99': 1.0}

    if key == 'jobType':
        if value in jobType:
            return jobType[value]
    
    if key == 'degree':
        if value in degree:
            return degree[value]

    if key == 'major':
        if value in major:
            return major[value]

    if key == 'industry':
        if value in industry:
            return industry[value]

    if key == 'yearsExperience':
        if value in yearsExperience:
            return yearsExperience[value]

    if key == 'milesFromMetropolis':
        if value in milesFromMetropolis:
            return milesFromMetropolis[value]
    

#Importing the Pickle model
model = pickle.load(open('SalModel.pkl','rb'))

#calling the template for GET method
@app.route("/",methods = ["GET"])
def dispTemplate():
    return render_template('EmpSalPredictor.html')


@app.route("/prediction",methods = ["POST"])
def prediction():
    if request.method == "POST":
        result = request.form
        arr = []
        for key,value in result.items():
            if key in ['jobType','degree','major','industry','yearsExperience','milesFromMetropolis']:
                val = features(key,value)
                arr.append(val)
                
        final_data = [np.array(arr).astype(dtype = "float32")]
        predicted_data = model.predict(final_data)
        if predicted_data[0] > 0.5:
            output = "The Predicted Salary of the model matches the actual Salary."
        else:
            output = "The Predicted Salary of the model doesnot match the actual Salary"
        
    return render_template('EmpSalPredictor.html',result_text = output)

if __name__ == '__main__':
    app.run(host = '0.0.0.0',port = 8080)